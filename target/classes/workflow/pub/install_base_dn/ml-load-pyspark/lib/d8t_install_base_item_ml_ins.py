from pyspark.sql import SparkSession
from datetime import datetime
import db_params

class d8tinstallbaseitemmlinspy:

    def __init__(self, sparkSession1):
        global sparkSession
        sparkSession = sparkSession1

    def execute(self):
        query = ""
        query = """with QQ1 as (select max(edl_ingest_time) as max_time from trans_serviceslob_erp_csi_erpprod.csi_item_instances) insert overwrite table """ + db_params.TTMMPPDDBB1 + """.""" + db_params.AAPPLLIIDD1EENNVV + """_install_base_item_ml_time select end_tm,max_time from """ + db_params.TTMMPPDDBB1 + """.""" + db_params.AAPPLLIIDD1EENNVV + """_install_base_item_ml_time inner join QQ1 on 1=1"""
        print("Job: 'd8t_install_base_item_ml'. Running Query at {}: {}".format(datetime.now(), query))
        sparkSession.sql(query)
        query = """ TRUNCATE TABLE """ + db_params.TTMMPPDDBB + """.""" + db_params.AAPPLLIIDD1EENNVV + """_install_base_item_ml"""
        print("Job: 'd8t_install_base_item_ml'. Running Query at {}: {}".format(datetime.now(), query))
        sparkSession.sql(query)
        query = """ INSERT INTO TABLE """ + db_params.TTMMPPDDBB + """.""" + db_params.AAPPLLIIDD1EENNVV + """_install_base_item_ML SELECT 8001 AS auto_c078, instance_id, accounting_class_code, active_end_date, active_start_date, actual_return_date, c2, c1, completeness_flag, attribute14, created_by, creation_complete_flag, creation_date, customer_view_flag, attribute6, external_reference, in_transit_order_line_id, install_date, install_location_id, install_location_type_code, inventory_item_id, inv_locator_id, inv_master_organization_id, inv_organization_id, inventory_revision, inv_subinventory_name, instance_condition_id, instance_number, instance_status_id, instance_type_code, instance_usage_code, quantity, last_oe_agreement_id, last_oe_po_number, last_oe_order_line_id, last_pa_project_id, last_pa_task_id, last_po_po_line_id, last_oe_rma_line_id, last_txn_line_detail_id, last_update_date, last_update_login, last_updated_by, last_vld_organization_id, last_wip_job_id, location_id, location_type_code, lot_number, manually_created_flag, merchant_view_flag, migrated_flag, mfg_serial_number_flag, owner_party_account_id, owner_party_id, owner_party_source_table, pa_project_id, pa_project_task_id, attribute1, attribute15, po_order_line_id, return_by_date, sellable_flag, serial_number, system_id, dtl__capxaction, unit_of_measure, attribute13, attribute12, attribute11, wip_job_id, attribute10, attribute5, attribute3, attribute7, attribute9, CAST(null AS STRING), attribute8, attribute2, attribute30, attribute29, null, null, null, null, null, null, Attribute22, Attribute20, Attribute21 FROM ( SELECT -1 AS c1, FROM_UNIXTIME( UNIX_TIMESTAMP(DTL__CAPXTIMESTAMP, 'yyyyMMddHHmmssSSSSSS'), 'yyyy-MM-dd HH:mm:ss' ) AS c2, dtl__capxaction AS dtl__capxaction, instance_id AS instance_id, instance_number AS instance_number, external_reference AS external_reference, inventory_item_id AS inventory_item_id, inventory_revision AS inventory_revision, inv_master_organization_id AS inv_master_organization_id, serial_number AS serial_number, mfg_serial_number_flag AS mfg_serial_number_flag, lot_number AS lot_number, quantity AS quantity, unit_of_measure AS unit_of_measure, accounting_class_code AS accounting_class_code, instance_condition_id AS instance_condition_id, instance_status_id AS instance_status_id, customer_view_flag AS customer_view_flag, merchant_view_flag AS merchant_view_flag, sellable_flag AS sellable_flag, system_id AS system_id, instance_type_code AS instance_type_code, active_start_date AS active_start_date, active_end_date AS active_end_date, location_type_code AS location_type_code, location_id AS location_id, inv_organization_id AS inv_organization_id, inv_subinventory_name AS inv_subinventory_name, inv_locator_id AS inv_locator_id, pa_project_id AS pa_project_id, pa_project_task_id AS pa_project_task_id, in_transit_order_line_id AS in_transit_order_line_id, wip_job_id AS wip_job_id, po_order_line_id AS po_order_line_id, last_oe_order_line_id AS last_oe_order_line_id, last_oe_rma_line_id AS last_oe_rma_line_id, last_po_po_line_id AS last_po_po_line_id, last_oe_po_number AS last_oe_po_number, last_wip_job_id AS last_wip_job_id, last_pa_project_id AS last_pa_project_id, last_pa_task_id AS last_pa_task_id, last_oe_agreement_id AS last_oe_agreement_id, install_date AS install_date, manually_created_flag AS manually_created_flag, return_by_date AS return_by_date, actual_return_date AS actual_return_date, creation_complete_flag AS creation_complete_flag, completeness_flag AS completeness_flag, attribute1 AS attribute1, attribute2 AS attribute2, attribute3 AS attribute3, attribute5 AS attribute5, attribute6 AS attribute6, attribute7 AS attribute7, attribute8 AS attribute8, attribute9 AS attribute9, attribute10 AS attribute10, attribute11 AS attribute11, attribute12 AS attribute12, attribute13 AS attribute13, attribute14 AS attribute14, attribute15 AS attribute15, created_by AS created_by, creation_date AS creation_date, last_updated_by AS last_updated_by, last_update_date AS last_update_date, last_update_login AS last_update_login, last_txn_line_detail_id AS last_txn_line_detail_id, install_location_type_code AS install_location_type_code, install_location_id AS install_location_id, instance_usage_code AS instance_usage_code, owner_party_source_table AS owner_party_source_table, owner_party_id AS owner_party_id, owner_party_account_id AS owner_party_account_id, last_vld_organization_id AS last_vld_organization_id, migrated_flag AS migrated_flag, attribute29 AS attribute29, attribute30 AS attribute30, ROW_NUMBER() OVER ( PARTITION BY instance_id ORDER BY edl_ingest_time desc, edl_record_sequence desc ) AS row_nm, edl_ingest_time as edl_ingest_time, Attribute22 as Attribute22, Attribute20 as Attribute20, Attribute21 as Attribute21 FROM trans_serviceslob_erp_csi_erpprod.csi_item_instances,""" + db_params.TTMMPPDDBB1 + """.""" + db_params.AAPPLLIIDD1EENNVV + """_install_base_item_ml_time QQ1 where edl_ingest_time > QQ1.start_tm and edl_ingest_time <= QQ1.end_tm ) x where x.row_nm=1"""
        print("Job: 'd8t_install_base_item_ml'. Running Query at {}: {}".format(datetime.now(), query))
        sparkSession.sql(query)


def main():
    m = d8tinstallbaseitemmlinspy(sparkSession)
    m.execute()

if __name__ == '__main__':
    global sparkSession
    sparkSession = SparkSession.builder.appName("d8tinstallbaseitemmlinspy").enableHiveSupport().getOrCreate()
    main()